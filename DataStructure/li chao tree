struct li_chao_tree {
	void add_line(point add, int i = 1, ll l = -P, ll r = P) {
		ll m = (l + r) / 2;
		bool lef = (eval(add, l) < eval(line[i], l)); // ###
		bool mid = (eval(add, m) < eval(line[i], m)); // ###
		if (mid) {
			swap(add, line[i]);
		}
		if (l == r - 1) { // Leaf Node
			return;
		} else if (lef != mid) { // Intersection point in [l, m)
			add_line(add, 2 * i, l, m);
		} else { // Intersection point in [m, r)
			add_line(add, 2 * i + 1, m, r);
		}
	}
	ll query(ll x, int i = 1, ll l = -P, ll r = P) {
		ll ans = eval(line[i], x), m = (l + r) / 2;
		if (l == r - 1) {
			return ans;
		} else if (x < m) {
			return min(ans, query(x, 2 * i, l, m)); // ###
		} else {
			return min(ans, query(x, 2 * i + 1, m, r)); // ###
		}
	}
	ll eval(point p, ll x) {
		return p.m * x + p.c;
	}
	void clear(int i = 1, ll l = -P, ll r = P) {
		ll m = (l + r) / 2;
		if (line[i].c == inf) {
			return;
		}
		line[i] = point();
		if (l == r - 1) {
			return;
		}
		clear(2 * i, l, m);
		clear(2 * i + 1, m, r);
	}
};